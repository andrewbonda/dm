import networkx as nx
import matplotlib.pyplot as plt
from itertools import combinations

def is_independent_set(G, nodes):
    """Проверяет, является ли данный набор вершин независимым (т.е. все вершины несмежны)."""
    for u, v in combinations(nodes, 2):
        if G.has_edge(u, v):
            return False
    return True

def find_maximal_independent_sets(G):
    """Находит все максимальные независимые множества (множества, которые нельзя расширить)."""
    nodes = list(G.nodes())
    maximal_sets = []

    for r in range(1, len(nodes) + 1):
        for subset in combinations(nodes, r):
            subset = set(subset)
            if is_independent_set(G, subset):
                # Проверка на максимальность
                if not any(subset < s for s in maximal_sets):
                    # Удаляем все подмножества текущего множества
                    maximal_sets = [s for s in maximal_sets if not s < subset]
                    maximal_sets.append(subset)
    
    print("Максимальные независимые множества (независимые вершины):")
    for i, s in enumerate(maximal_sets):
        print(f"  X{i+1} = {sorted(s)}")
    return maximal_sets

def maigwessman_coloring(G):
    """Метод окрашивания графа по алгоритму Вессмана."""
    independent_sets = find_maximal_independent_sets(G)
    independent_sets.sort(key=lambda s: -len(s))  # Сортировка по убыванию размера

    color_map = {}
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow', 'brown', 'pink', 'cyan']
    color_index = 0

    while independent_sets:
        current_set = independent_sets.pop(0)
        available_nodes = [v for v in current_set if v not in color_map]
        if not available_nodes:
            continue

        # Присваиваем цвет всем доступным вершинам в текущем множестве
        for v in available_nodes:
            color_map[v] = colors[color_index % len(colors)]

        # Удаляем из оставшихся множеств вершины, уже окрашенные
        new_sets = []
        for s in independent_sets:
            s = s - set(available_nodes)
            if s:
                new_sets.append(s)
        independent_sets = sorted(new_sets, key=lambda s: -len(s))
        color_index += 1

    print(f"\nХроматическое число графа χ(G) = {color_index}")
    return color_map, color_index

def draw_colored_graph(G, color_map):
    """Отображает граф с цветной окраской вершин."""
    pos = nx.spring_layout(G, seed=42)
    colors = [color_map.get(node, 'gray') for node in G.nodes()]
    nx.draw(G, pos, with_labels=True, node_color=colors, node_size=800, font_weight='bold')
    plt.title("Визуализация цветной окраски графа")
    plt.show()

# === Пример графа ===
G = nx.Graph()
G.add_edges_from([
    (1, 2), (1, 3), (2, 4), (2, 5), (3, 5), (4, 5), (4, 6)
])

coloring, chromatic_number = maigwessman_coloring(G)
draw_colored_graph(G, coloring)
