import matplotlib.pyplot as plt
import networkx as nx
import random

def create_adjacency_matrix(choice, n):
    adjacency_matrix = [[0 for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for j in range(i + 1, n):
            if choice == 1:
                if random.random() < 0.4:
                    adjacency_matrix[i][j] = adjacency_matrix[j][i] = 1
            elif choice == 2:
                if random.random() < 0.3:
                    adjacency_matrix[i][j] = adjacency_matrix[j][i] = 1
                if random.random() > 0.7:
                    adjacency_matrix[i][i] = 1
            elif choice == 3:
                if random.random() > 0.6:
                    weight = random.randint(1, 3)
                    adjacency_matrix[i][j] += weight
                    adjacency_matrix[j][i] += weight
            elif choice == 4:
                adjacency_matrix[i][j] = adjacency_matrix[j][i] = 1
    return adjacency_matrix

def create_incidence_matrix(adjacency_matrix):
    n = len(adjacency_matrix)
    edge_count = sum(adjacency_matrix[i][j] for i in range(n) for j in range(i, n))
    incidence_matrix = [[0 for _ in range(edge_count)] for _ in range(n)]
    current_edge = 0
    for i in range(n):
        for j in range(i, n):
            for _ in range(adjacency_matrix[i][j]):
                incidence_matrix[i][current_edge] += 1
                incidence_matrix[j][current_edge] += 1
                current_edge += 1
    return incidence_matrix

def get_vertices_and_edges(adjacency_matrix):
    n = len(adjacency_matrix)
    vertices = list(range(n))
    edges = []
    for i in range(n):
        for j in range(i, n):
            for _ in range(adjacency_matrix[i][j]):
                edges.append((i, j))
    return vertices, edges

def show_graph(adjacency_matrix, title):
    G = nx.Graph()
    n = len(adjacency_matrix)
    for i in range(n):
        G.add_node(i)
        for j in range(i, n):
            for _ in range(adjacency_matrix[i][j]):
                if i == j:
                    G.add_edge(i, i)
                else:
                    G.add_edge(i, j)
    plt.figure(figsize=(8, 6))
    nx.draw(G, with_labels=True, node_color='red', node_size=500)
    plt.title(title)
    plt.show()


print("Выберите тип графа:\n1. Простой\n2. С петлями\n3. С кратными рёбрами\n4. Полный")
choice = int(input("Ваш выбор (1-4): "))
n = int(input("Число вершин: "))

adjacency_matrix = create_adjacency_matrix(choice, n)
titles = ["Простой граф", "Граф с петлями", "Граф с кратными рёбрами", "Полный граф"]

print("\nМатрица смежности:")
for row in adjacency_matrix:
    print(row)

incidence_matrix = create_incidence_matrix(adjacency_matrix)
print("\nМатрица инцидентности:")
for row in incidence_matrix:
    print(row)

vertices, edges_list = get_vertices_and_edges(adjacency_matrix)
print("\nСписок вершин:")
print(vertices)
print("\nСписок рёбер (в формате (начало, конец)):")
print(edges_list)

show_graph(adjacency_matrix, titles[choice - 1])


